/*
 * mm.c
 *
 * Name: Xintong Li, Maulik Gupta
 * 
 * Note: This is to attest to the below mentioned code's similarity 
 * to the example in Chapter 9 of the CSAPP, given its influence on 
 * the development of the program.
 * 
 * This memory allocator project uses implicit list and first-fit policy.
 * The alignment is 16.
 *
 */
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdbool.h>
#include <stdint.h>

#include "mm.h"
#include "memlib.h"

/*
 * If you want to enable your debugging output and heap checker code,
 * uncomment the following line. Be sure not to have debugging enabled
 * in your final submission.
 */
#define DEBUG

#ifdef DEBUG
/* When debugging is enabled, the underlying functions get called */
#define dbg_printf(...) printf(__VA_ARGS__)
#define dbg_assert(...) assert(__VA_ARGS__)
#else
/* When debugging is disabled, no code gets generated */
#define dbg_printf(...)
#define dbg_assert(...)
#endif /* DEBUG */

/* do not change the following! */
#ifdef DRIVER
/* create aliases for driver tests */
#define malloc mm_malloc
#define free mm_free
#define realloc mm_realloc
#define calloc mm_calloc
#define memset mem_memset
#define memcpy mem_memcpy
#endif /* DRIVER */

/* What is the correct alignment? */
#define ALIGNMENT 16

/* Constants and Macros */
#define WSIZE 8                 /*size for word and header/footer*/
#define DSIZE 16                /*size for double word*/
#define CHUNKSIZE (1<<12)


static unsigned long MAX(size_t x, size_t y) {
    if (x > y) return x;
    return y;
}

/*The belowmentioned helper function is mentioned on CSAPP, p830*/
/* Pack the size and allocated bit into a word.*/
static unsigned long PACK(size_t size, size_t alloc) {return (size | alloc);}
static unsigned long GET(void* p) {return (*(unsigned long *)(p));}

static unsigned long PUT(void* p, unsigned long val) {
    (*(unsigned long *) p) = val;
    return (*(unsigned long *)(p));
}
static void SET_PTR(void* p1, void* p2) {*(unsigned long *)(p1) = (unsigned long)(p2);}
//#define GET_ADDRESS(p) (*(void **)(p))
static void * GET_ADDRESS(void* bp) {return (*(void **)(bp));}
static unsigned long GET_SIZE(void* p) {return GET(p) & ~0x7;}
static unsigned long GET_ALLOC(void* p) {return GET(p) & 0x1;}

static char * HDRP(char* bp) {return (char *)(bp) - WSIZE;}
static char * FTRP(char* bp) {return ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE);}


static char * NEXT_BLKP(char* bp) {return ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)));}
static char * PREV_BLKP(char* bp) {return ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)));}
static char * PRED(char* bp) {return ((char *)(bp));}
static char * SUCC(char* bp) {return ((char *)(bp+WSIZE));}
static unsigned long GET_PAYLOAD(char* bp) {return (GET_SIZE(HDRP(bp))-DSIZE);}
static char * PRED_BLKP(char* bp) {return (*(char **)(bp));}
static char * SUCC_BLKP(char* bp) {return (*(char **)(bp + WSIZE));}

static char *heap_listp;
static int MAX_SIZE=10;
static void* linkhead[10]={NULL};
static void *extend_heap(size_t words);
static void *coalesce(void *bp);
static void *find_fit(size_t size);     //找到合适的块
static void place(void* bp,size_t asize);   //放置块并进行分割
static void placefree(void* bp);            //将空闲链表放置在链表的开头
static void deletefree(void* bp);           //删除空闲结点
static void *recoalesce(void *bp,size_t needsize);          //针对realloc而实现的coalesce函数
static int findlink(size_t size); 


/* rounds up to the nearest multiple of ALIGNMENT */
static size_t align(size_t x)
{
    return ALIGNMENT * ((x+ALIGNMENT-1)/ALIGNMENT);
}

/*If the previous and next block is unallocated, it coalesces them. Otherwise, the block is not modified.*/

/*
 * Initialize: returns false on error, true on success.
 */
bool mm_init(void)
{
    if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1) return false;
    for(int i=0;i<MAX_SIZE;++i)
        linkhead[i]=NULL;

    PUT(heap_listp, 0);
    PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1));  /*set allocated bit of prologue header to 1*/
    PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1));  /*set allocated bit of prologue footer to 1*/
    PUT(heap_listp + (3*WSIZE), PACK(0, 1));

    heap_listp = heap_listp + (2*WSIZE);

    if (extend_heap(CHUNKSIZE/WSIZE) == NULL) return false;

    return true;
}
static void *extend_heap(size_t words)
{
    char *bp;
    size_t size;

    /* Allocate an even number of words to maintain alignment */
    size=(words %2)? (words+1)*WSIZE: words*WSIZE;
    if((long)(bp=mem_sbrk(size))==-1)
        return NULL;

    /* Initialize free block header/footer and the epilogue header */
    PUT(HDRP(bp),PACK(size,0));  /* Free block header */
    PUT(FTRP(bp),PACK(size,0));  /* Free block footer */
    PUT(HDRP(NEXT_BLKP(bp)),PACK(0,1));   /* New epilogue header */

//    placefree(bp);

    #ifdef DEBUG
//        printf("the freelist_head size is :%d\n",GET_SIZE(HDRP(freelist_head)));
//        if(GET_ADDRESS(PRED(freelist_head))==NULL && GET_ADDRESS(SUCC(freelist_head))==NULL) 
//            printf("the double link of freelist_head is NULL");
    #endif


    /* Coalesce if the previous block was free */
    return coalesce(bp);
}

/*looks for an unallocated block with the given size by using first-fit policy*/
static void *find_fit(size_t size) {
    for(int index=findlink(size);index<MAX_SIZE;++index)
    {
        void* bp=linkhead[index];
        while(bp!=NULL)
        {
//            maxfreesize=GET_SIZE(HDRP(bp));
            if(GET_SIZE(HDRP(bp))>=size) return bp;
            bp=GET_ADDRESS(SUCC(bp));
        }
    }

    return NULL;  
}

static void place(void *bp, size_t asize) {
     size_t left=GET_SIZE(HDRP(bp))-asize;
    int alloc=GET_ALLOC(HDRP(bp));
    if(alloc==0)
        deletefree(bp);
    //大于双字要把头尾都考虑进行说明，可以进行分割,由于输入的asize肯定是双字结构，这样就保证了分割出来的内容也都是双字结构
    //前继和后继结点都要考虑进行
    if(left>=(DSIZE*2))
    {
        //申请的块为忙碌
        PUT(HDRP(bp),PACK(asize,1));
        PUT(FTRP(bp),PACK(asize,1));
        //分割出来的块为空闲
        PUT(HDRP(NEXT_BLKP(bp)),PACK(left,0));
        PUT(FTRP(NEXT_BLKP(bp)),PACK(left,0));
        //把该结点从空闲链表中删除，并把下一个结点加入空闲链表，产生了一个空闲链表，所以执行一次合并操作
        coalesce(NEXT_BLKP(bp));
//        placefree(NEXT_BLKP(bp));

    }
    //无法进行分割
    else
    {
        size_t allsize=GET_SIZE(HDRP(bp));
        //全部设定为忙碌
        PUT(HDRP(bp),PACK(allsize,1));
        PUT(FTRP(bp),PACK(allsize,1));
    }
}


/*
 * allocates a block with given size.
 */
void* malloc(size_t size)
{
    /* IMPLEMENT THIS */

   size_t asize;   /* Adjusted block size */
    size_t extendsize; /* Amount to extend heap if no fit */
    char *bp;

    /* Ignore spurious requests */
    if(size==0)
    {
        return NULL;
    }

    /* Adjust block size to include overhead and alignment reqs. */
    //要加上头尾两个指针
    if(size<=DSIZE)
        asize=2*DSIZE;
    else
        asize=DSIZE*((size+(DSIZE)+(DSIZE-1))/DSIZE);

    /* Search the free list for a fit */
    if((bp=find_fit(asize))!=NULL)
    {
        place(bp,asize);
//        printf("the payload of bp is:%u\n",GET_PAYLOAD(bp));
        return bp;
    }

    /* No fit found. Get more memory and place the block */
//    extendsize=MAX(asize,CHUNKSIZE);



    extendsize=asize;
    if(extendsize<=DSIZE)
        extendsize=2*DSIZE;
    else
        extendsize=DSIZE*((extendsize+(DSIZE)+(DSIZE-1))/DSIZE);


    //不够申请
    if((bp=extend_heap(extendsize/WSIZE))==NULL)
    {
        return NULL;
    }
    place(bp,asize);

    return bp;
}

/*
 * frees the block pointed to by bp
 */
void free(void* ptr)
{
    /* IMPLEMENT THIS */
    size_t size=GET_SIZE(HDRP(ptr));
    //头尾归为free的block
    PUT(HDRP(ptr),PACK(size,0));
    PUT(FTRP(ptr),PACK(size,0));
    coalesce(ptr);

}

/*
 * The realloc function returns a pointer to an allocated region of at least size bytes
 */
void* realloc(void* ptr, size_t size)
{
     if(ptr==NULL) return mm_malloc(size);
    if(size==0)
    { 
        mm_free(ptr);
        return ptr;
    }

    size_t asize=0;
    //计算要分配这么size内存所需要的总体size
    if(size<=DSIZE)
        asize=2*DSIZE;
    else
        asize=DSIZE*((size+(DSIZE)+(DSIZE-1))/DSIZE);


    if(ptr!=NULL)
    {
        size_t oldsize=GET_PAYLOAD(ptr);
        if(oldsize<size)
        {

            void* newptr=recoalesce(ptr,asize);
            if(newptr==NULL)
            {
                newptr=mm_malloc(asize);
                memcpy(newptr,ptr,oldsize);
                mm_free(ptr);
                return newptr;
            }
            else
            {
                return newptr;
            }
        }
        else if(oldsize==size)
        {
            return ptr;
        }
        //申请的块比原来的块小
        else
        {
//            place(ptr,asize);
            return ptr;
        }
        /*
        memcpy(newptr,ptr,finalsize);
        mm_free(ptr);
        return newptr;
        */
    }
    return NULL;
}
static void *recoalesce(void *bp,size_t needsize)
{
    size_t prev_alloc=GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc=GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size=GET_SIZE(HDRP(bp));
    //情况一，前后都没有空闲块
    if(prev_alloc && next_alloc)
    {
        return NULL;
    }

    //情况二，后一块是空闲的
    else if(prev_alloc && !next_alloc)
    {
        size+=GET_SIZE(HDRP(NEXT_BLKP(bp)));
        //即使加上去内存也不够
        if(size<needsize)
            return NULL;
        else
        {
            deletefree(NEXT_BLKP(bp));
            //合并
            PUT(HDRP(bp),PACK(size,1));
            PUT(FTRP(bp),PACK(size,1));
//            place(bp,needsize);
            return bp;
        }
    }
    //情况三，前一块是空闲的
    else if(!prev_alloc && next_alloc)
    {
        size+=GET_SIZE(HDRP(PREV_BLKP(bp)));
        if(size<needsize)
            return NULL;
        else
        {
            size_t thissize=GET_PAYLOAD(bp);
            void* prev_point=PREV_BLKP(bp);
            deletefree(prev_point);
            //合并
            PUT(FTRP(bp),PACK(size,1));
            PUT(HDRP(prev_point),PACK(size,1));
            //拷贝
            memcpy(prev_point,bp,thissize);
//            place(prev_point,needsize);
            return prev_point;
        }
    }
    //情况四，前后都是空闲的
    else
    {
        size+=(GET_SIZE(HDRP(NEXT_BLKP(bp)))+GET_SIZE(FTRP(PREV_BLKP(bp))));
        if(size<needsize)
            return NULL;
        else
        {
            size_t thissize=GET_PAYLOAD(bp);
            void* prev_point=PREV_BLKP(bp);
            deletefree(prev_point);
            deletefree(NEXT_BLKP(bp));
            PUT(FTRP(NEXT_BLKP(bp)),PACK(size,1));
            PUT(HDRP(PREV_BLKP(bp)),PACK(size,1));
            memcpy(prev_point,bp,thissize);
//            place(prev_point,needsize);
            return prev_point;
        }
    }
}
static void *coalesce(void *bp)
{
    //关于这一块的改free操作已经在free函数的过程中执行了


    size_t prev_alloc=GET_ALLOC(FTRP(PREV_BLKP(bp)));
    size_t next_alloc=GET_ALLOC(HDRP(NEXT_BLKP(bp)));
    size_t size=GET_SIZE(HDRP(bp));

    //情况一，前一块和后一块都被申请了
    if(prev_alloc && next_alloc)
    {
        placefree(bp);
        return bp;
    }


    //情况二，后一块是空闲的
    else if(prev_alloc && !next_alloc)
    {
        deletefree(NEXT_BLKP(bp));
        size+=GET_SIZE(HDRP(NEXT_BLKP(bp)));
        PUT(HDRP(bp),PACK(size,0));
        //改完头部大小就变了，只能直接访问尾部，对尾部进行改大小的操作
        PUT(FTRP(bp),PACK(size,0));
        placefree(bp);
        return bp;
    }

    //情况三，前一块是空闲的
    else if(!prev_alloc && next_alloc)
    {
        deletefree(PREV_BLKP(bp));
        size+=GET_SIZE(FTRP(PREV_BLKP(bp)));
        PUT(FTRP(bp),PACK(size,0));
        PUT(HDRP(PREV_BLKP(bp)),PACK(size,0));
        placefree(PREV_BLKP(bp));
        return PREV_BLKP(bp);
    }

    //情况四，前后都是空的
    else
    {
        deletefree(PREV_BLKP(bp));
        deletefree(NEXT_BLKP(bp));
        size+=(GET_SIZE(HDRP(NEXT_BLKP(bp)))+GET_SIZE(FTRP(PREV_BLKP(bp))));
        PUT(FTRP(NEXT_BLKP(bp)),PACK(size,0));
        PUT(HDRP(PREV_BLKP(bp)),PACK(size,0));
        placefree(PREV_BLKP(bp));
        return PREV_BLKP(bp);
    }
}

/*
 * calloc
 * This function is not tested by mdriver, and has been implemented for you.
 */
void* calloc(size_t nmemb, size_t size)
{
    void* ptr;
    size *= nmemb;
    ptr = malloc(size);
    if (ptr) {
        memset(ptr, 0, size);
    }
    return ptr;
}
static void placefree(void* bp)
{
    //按顺序放置
    int index=findlink(GET_SIZE(HDRP(bp)));
    void* head=linkhead[index];
    void * temp1;
    void * temp2;
    if(head==NULL)
    {
        linkhead[index]=bp;
        //指向的是它的地址，地址里面存的都是是上一个或者下一个块的地址，所以每解一次引用得到的都是对应的下一个块的地址
        temp1 = GET_ADDRESS(PRED(bp));
        temp1 = NULL;
        temp1 = GET_ADDRESS(SUCC(bp));
        temp1 = NULL;
        //GET_ADDRESS(PRED(bp))=NULL;
        //GET_ADDRESS(SUCC(bp))=NULL;
    }
    else
    {
        size_t bpsize=GET_SIZE(HDRP(bp));
        void* temp=NULL;
        while(head!=NULL)
        {
            temp=head;
            if(GET_SIZE(HDRP(head))>=bpsize) break;
            //head=GET_ADDRESS(SUCC(head));
            temp1 = GET_ADDRESS(SUCC(head));
            head = temp1;
        }
        if(head==NULL)
        {
            //插入尾部
            /*
            GET_ADDRESS(SUCC(temp))=bp;
            GET_ADDRESS(PRED(bp))=temp;
            GET_ADDRESS(SUCC(bp))=NULL;
            */
           temp1 = GET_ADDRESS(SUCC(temp));
           temp1 = bp;
           temp1 = GET_ADDRESS(PRED(bp));
           temp1 = bp;
           temp1 = GET_ADDRESS(SUCC(bp));
           temp1 = NULL;
        }
        //插入前面
        else
        {
            if(head==linkhead[index])
            {
                /*
                GET_ADDRESS(PRED(head))=bp;
                GET_ADDRESS(SUCC(bp))=head;
                GET_ADDRESS(PRED(bp))=NULL;
                */
                temp1 = GET_ADDRESS(PRED(head));
                temp1 = bp;
                temp1 = GET_ADDRESS(SUCC(bp));
                temp1 = head;
                temp1 = GET_ADDRESS(PRED(bp));
                temp1 = NULL;
                linkhead[index]=bp;
            }
            //插入中间
            else
            {
                /*
                GET_ADDRESS(SUCC(GET_ADDRESS(PRED(head))))=bp;
                GET_ADDRESS(PRED(bp))=GET_ADDRESS(PRED(head));
                GET_ADDRESS(SUCC(bp))=head;
                GET_ADDRESS(PRED(head))=bp;
                */
               temp2 = GET_ADDRESS(PRED(head));
               temp1 = GET_ADDRESS(SUCC(temp2));
               temp1 = bp;
               temp1 = GET_ADDRESS(PRED(bp));
               temp2 = GET_ADDRESS(PRED(head));
               temp1 = temp2;
               temp1 = GET_ADDRESS(SUCC(bp));
               temp1 = head;
               temp1 = PRED(head);
               temp1 = bp;
            }
        }
    }
}
static void deletefree(void* bp)
{
    void *temp1 = NULL;
    void *temp2 = NULL;
    int index=findlink(GET_SIZE(HDRP(bp)));
    if(linkhead[index]==NULL)
        printf("freelist is empty. Something must be wrong!!!!!");
    //链表中只有一个空闲块的时候
    if(GET_ADDRESS(PRED(bp))==NULL && GET_ADDRESS(SUCC(bp))==NULL)
    {
        linkhead[index]=NULL;
    }
    else if(GET_ADDRESS(PRED(bp))==NULL && GET_ADDRESS(SUCC(bp))!=NULL)  //链表头，并且不只有一个结点
    {
        //GET_ADDRESS(PRED(GET_ADDRESS(SUCC(bp))))=NULL;
        temp1 = GET_ADDRESS(SUCC(bp));
        temp2 = GET_ADDRESS(PRED(temp1));
        temp2 = NULL;
        linkhead[index]=GET_ADDRESS(SUCC(bp));
        //GET_ADDRESS(SUCC(bp))=NULL;
        temp1 = GET_ADDRESS(SUCC(bp));
        temp1 = NULL;
    }
    else if(GET_ADDRESS(PRED(bp))!=NULL && GET_ADDRESS(SUCC(bp))==NULL)   //链表尾，并且不只有一个结点
    {
        /*
        GET_ADDRESS(SUCC(GET_ADDRESS(PRED(bp))))=NULL;
        GET_ADDRESS(PRED(bp))=NULL;
        */
        temp1 = GET_ADDRESS(PRED(bp));
        temp2 = GET_ADDRESS(SUCC(temp1));
        temp2 = NULL;
    }
    else                    //中间结点
    {
        /*
        GET_ADDRESS(SUCC(GET_ADDRESS(PRED(bp))))=GET_ADDRESS(SUCC(bp));
        GET_ADDRESS(PRED(GET_ADDRESS(SUCC(bp))))=GET_ADDRESS(PRED(bp));
        GET_ADDRESS(PRED(bp))=GET_ADDRESS(SUCC(bp))=NULL;
        */
        void *temp3 = NULL;
        temp1 = GET_ADDRESS(PRED(bp));
        temp2 = GET_ADDRESS(SUCC(temp1));
        temp3 = GET_ADDRESS(SUCC(bp));
        temp2 = temp3;
        temp1 = GET_ADDRESS(PRED(bp));
        temp2 = GET_ADDRESS(SUCC(bp));
        temp1 = NULL;
        temp2 = NULL;
    }
}

static int findlink(size_t size)
{
    if(size<=8)
        return 0;
    else if(size<=16)
        return 1;
    else if(size<=32)
        return 2;
    else if(size<=64)
        return 3;
    else if(size<=128)
        return 4;
    else if(size<=256)
        return 5;
    else if(size<=512)
        return 6;
    else if(size<=2048)
        return 7;
    else if(size<=4096)
        return 8;
    else
        return 9;
}

/*
 * Returns whether the pointer is in the heap.
 * May be useful for debugging.
 */
static bool in_heap(const void* p)
{
    return p <= mem_heap_hi() && p >= mem_heap_lo();
}

/*
 * Returns whether the pointer is aligned.
 * May be useful for debugging.
 */
static bool aligned(const void* p)
{
    size_t ip = (size_t) p;
    return align(ip) == ip;
}

/*
 * mm_checkheap
 */
bool mm_checkheap(int lineno)
{
#ifdef DEBUG
    /* Write code to check heap invariants here */
    /* IMPLEMENT THIS */
#endif /* DEBUG */
    return true;
}
